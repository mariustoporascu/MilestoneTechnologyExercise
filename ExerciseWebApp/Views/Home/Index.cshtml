@{
	ViewData["Title"] = "Home Page";
}
<style>
	#upload-form {
		max-width: 500px;
		margin: 0 auto;
	}

	#upload-form .form-group {
		margin-bottom: 20px;
	}

	#upload-form label {
		font-size: 18px;
		font-weight: bold;
		display: block;
		margin-bottom: 10px;
	}

	#upload-form input[type="file"] {
		width: 100%;
		height: 40px;
		border: 1px solid #ccc;
		font-size: 16px;
		padding: 10px;
	}

	#upload-form button[type="submit"] {
		width: 100%;
		height: 40px;
		background-color: #48bf00;
		border: none;
		color: #fff;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
	}

	#upload-form .file-item {
		border: 1px solid #ccc;
		padding: 20px;
		margin-bottom: 20px;
	}

	#upload-form .file-name {
		font-size: 18px;
		font-weight: bold;
		margin-bottom: 10px;
	}
	#upload-form .file-delimiter label {
		font-size: 18px;
		font-weight: bold;
		margin-bottom: 10px;
	}

	#upload-form .delimiter-select {
		width: 100%;
		height: 40px;
		border: 1px solid #ccc;
		font-size: 16px;
	}

	#upload-form .header-item {
		display: flex;
		align-items: center;
		margin-bottom: 10px;
	}

	#upload-form .header-name-select {
		flex: 1;
		height: 40px;
		border: 1px solid #ccc;
		font-size: 16px;
	}

	#upload-form .header-order-input {
		width: 100px;
		height: 40px;
		border: 1px solid #ccc;
		font-size: 16px;
		padding: 10px;
	}

	#upload-form .add-button {
		width: 100%;
		height: 40px;
		background-color: #f77f00;
		border: none;
		color: #fff;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		margin-top: 10px;
		margin-bottom: 10px;
	}

	#upload-form .arrow-button {
		display: inline-block;
		width: 20px;
		height: 40px;
		margin: 5px;
		background-color: transparent;
		font-size:20px;
		padding:0;
		border: 1px solid #ccc;
		cursor: pointer;
	}

	#upload-form .delete-button {
		display: inline-block;
		width: 20px;
		height: 40px;
		margin: 5px;
		background-color: transparent;
		font-size:20px;
		padding:0;
		border: 1px solid #ccc;
		cursor: pointer;
		color: red;
	}
</style>

<form id="upload-form" method="post" enctype="multipart/form-data" asp-action="PostFilesAndConfiguration">
	<div class="form-group">
		<label for="files">Select Files:</label>
		<input type="file" name="files" id="files" multiple>

	</div>
	<button type="button" id="add-files-button" class="add-button">Add Files</button>
	<div id="file-list"></div>
	<button type="submit" class="btn btn-success">Submit</button>
</form>
<!-- Add this template for each file item -->
<template id="file-item-template">
	<div class="file-item">
		<div class="file-name"></div>
		<div class="file-delimiter">
			<label>Delimiter</label>
			<select class="delimiter-select" name="delimiter">
				<option value=",">Comma</option>
				<option value="#">Hash</option>
				<option value="-">Hyphen</option>
			</select>
		</div>
		<div class="header-list"></div>
		<button type="button" class="add-button">Add Header</button>
	</div>
</template>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const fileListContainer = document.getElementById('file-list');
			const addFilesButton = document.getElementById('add-files-button');
			const uploadForm = document.getElementById('upload-form');

			// Get the file item template
			const fileItemTemplate = document.getElementById('file-item-template');

			// Handle adding files to the file list
			addFilesButton.addEventListener('click', () => {
				const filesInput = document.getElementById('files');
				const files = Array.from(filesInput.files);

				files.forEach((file, index) => {
					// Clone the file item template
					const fileItem = fileItemTemplate.content.cloneNode(true);

					// Set the file name
					fileItem.querySelector('.file-name').textContent = file.name;

					// Set the delimiter select name
					fileItem.querySelector('.delimiter-select').name = `delimiter-${index}`;

					// Add a data attribute to the file item with the index
					fileItem.querySelector('.file-item').dataset.index = index;

					fileListContainer.appendChild(fileItem);
				});
			});
			// Handle adding headers to the header list for each file
			fileListContainer.addEventListener('click', (event) => {
				if (event.target.classList.contains('add-button')) {
					const fileItem = event.target.parentNode;
					const headerList = fileItem.querySelector('.header-list');

					const headerItem = document.createElement('div');
					headerItem.classList.add('header-item');

					const headerNameSelect = document.createElement('select');
					headerNameSelect.classList.add('header-name-select');
					headerNameSelect.name = `header-name-${fileItem.dataset.index}`;
					headerNameSelect.innerHTML = `
						<option value="CompanyName">Company Name</option>
						<option value="YearsInBusiness">Years In Business</option>
						<option value="YearFounded">Year Founded</option>
						<option value="FullName">Contact Full Name</option>
						<option value="FirstName">Contact First Name</option>
						<option value="LastName">Contact Last Name</option>
						<option value="PhoneNumber">Contact Phone Number</option>
						<option value="Email">Contact Email</option>
					`;
					headerItem.appendChild(headerNameSelect);

					const headerOrderInput = document.createElement('input');
					headerOrderInput.classList.add('header-order-input');
					headerOrderInput.name = `header-order-${fileItem.dataset.index}`;
					headerOrderInput.type = 'number';
					headerOrderInput.min = '1';
					headerOrderInput.value = headerList.childNodes.length + 1;
					headerItem.appendChild(headerOrderInput);

					const moveUpButton = document.createElement('button');
					moveUpButton.classList.add('arrow-button', 'move-up-button');
					moveUpButton.setAttribute('type', 'button');
					moveUpButton.setAttribute('title', 'Move Up');
					moveUpButton.innerHTML = '&uarr;';
					headerItem.appendChild(moveUpButton);

					const moveDownButton = document.createElement('button');
					moveDownButton.classList.add('arrow-button', 'move-down-button');
					moveDownButton.setAttribute('type', 'button');
					moveDownButton.setAttribute('title', 'Move Down');
					moveDownButton.innerHTML = '&darr;';
					headerItem.appendChild(moveDownButton);

					const deleteButton = document.createElement('button');
					deleteButton.classList.add('delete-button');
					deleteButton.setAttribute('type', 'button');
					deleteButton.setAttribute('title', 'Remove');
					deleteButton.innerHTML = '&times;';
					headerItem.appendChild(deleteButton);

					headerList.appendChild(headerItem);
				}
			});
			// Handle moving headers up and down in the header list for each file
			fileListContainer.addEventListener('click', (event) => {
				if (event.target.classList.contains('move-up-button')) {
					const headerItem = event.target.parentNode;
					const headerList = headerItem.parentNode;
					const previousHeader = headerItem.previousSibling;
					const headerItemIndex = Array.from(headerList.childNodes).indexOf(headerItem);
					const previousHeaderIndex = Array.from(headerList.childNodes).indexOf(previousHeader);
					if (previousHeader) {
						headerItem.querySelector('.header-order-input').value = previousHeaderIndex + 1;
						previousHeader.querySelector('.header-order-input').value = headerItemIndex + 1;
						headerList.insertBefore(headerItem, previousHeader);
					}
				} else if (event.target.classList.contains('move-down-button')) {
					const headerItem = event.target.parentNode;
					const headerList = headerItem.parentNode;
					const nextHeader = headerItem.nextSibling;
					const headerItemIndex = Array.from(headerList.childNodes).indexOf(headerItem);
					const nextHeaderIndex = Array.from(headerList.childNodes).indexOf(nextHeader);
					if (nextHeader) {
						headerItem.querySelector('.header-order-input').value = nextHeaderIndex + 1;
						nextHeader.querySelector('.header-order-input').value = headerItemIndex + 1;
						headerList.insertBefore(nextHeader, headerItem);
					}
				}
			});

			// Handle deleting headers from the header list for each file
			fileListContainer.addEventListener('click', (event) => {
				if (event.target.classList.contains('delete-button')) {
					const headerItem = event.target.parentNode;
					const headerList = headerItem.parentNode;
					headerList.removeChild(headerItem);

					// Update the order of the remaining headers
					const headerItems = headerList.querySelectorAll('.header-item');
					headerItems.forEach((item, index) => {
						item.querySelector('.header-order-input').value = index + 1;
					});
				}
			});

		});
	</script>
}

